#!/usr/bin/env ruby

##
#
#  @project CodeChallenger CLI
#  @author  Matti van de Weem <mvdweem@gmail.com>, Koen Vendrik <k.vendrik@gmail.com>
#  @date    January 2015
#  @url     http://github.com/CodeChallenger
#
##

require 'rubygems'
require 'bundler/setup'

require 'optparse'
require 'json'
require_relative 'inc/challenger.class.rb'


# read a file
def read_file(file_name)
  file = File.open(file_name, 'r')
  data = file.read
  file.close
  return data
end

# check if codechallenger directory
def check_if_challenger_dir(pathPrefix='')
  if not File.exists?(pathPrefix+'.codechallenger.json')
    puts 'No .codechallenger.json file found. Run the init command first.'
    exit 1
  end
end

# hash to store command line options
options = {}

helpText = <<HELP
Usage: codechallenger <command> [options...]

Commands:
  init          generate a new challenge in the directory
  uninit        remove CodeChallenger from the directory
  deploy        deploys your challenge code to Github
  update        update the CLI to the latest version

See 'codechallenger <command> --help' for help on a specific command.
HELP

global = OptionParser.new do |opts|
  opts.on('-h', '--help', 'Show help') do |language|
    puts helpText
    exit 0
  end
end

subCommands = {

    'init' => {
        :optionParser => OptionParser.new do |opts|
          opts.banner = 'Usage: codechallenger init [options...]'

          opts.on('--language [LANGUAGE]', 'Give a challenge for given language') do |language|
            options[:language] = language.downcase
          end

          opts.on('--framework [FRAMEWORK]', 'Give a challenge with the given framework') do |framework|
            options[:framework] = framework.downcase
          end

          opts.on('--path [PATH]', 'Path to folder you\'d like to create the challenge in') do |path|
            options[:path] = path
          end
        end,
        :handler => lambda {
          path = options[:path] != nil ? options[:path]+'/.codechallenger.json' : '.codechallenger.json'

          if File.file?(path)
            loop do
              print "\nThere is already a .codechallenger.json in this directory.\nWould you like to continue? [y/N] "

              answer = gets.chomp
              return if answer.downcase != 'y'
              break if answer.downcase == 'y'
            end
          end

          challenger = Challenger.new(options)

          loop do
            challenger.new_challenge
            puts "\n"+challenger.construct_str
            print "\nUse this challenge? [Y/n] "

            answer = gets.chomp
            break if answer.downcase != 'n'
          end

          details = challenger.get_details

          # write details to .codechallenger.json file
          File.open(path, 'w') {|f| f.write(JSON.pretty_generate(details)) }

          puts "\n✔ Start Coding!"
        }
    },

    'deploy' => {
        :optionParser => OptionParser.new do |opts|
          opts.banner = 'Usage: codechallenger deploy'

          opts.on('--path [PATH]', 'Path to the challenge folder') do |path|
            options[:path] = path
          end
        end,
        :handler => lambda {
          path = options[:path] != nil ? options[:path]+'/' : ''

          # check if directory is codechallenger directory
          check_if_challenger_dir(path)

          # check if folder has Git
          if not File.directory?(path+'.git')
            if not system('git init')
              exit 1
            end
          end

          # get path to settings
          settingsPath = path+'.codechallenger.json'

          # get settings
          settings = File.read(settingsPath)
          settings = JSON.parse(settings)

          # if no repository in settings
          # ask url and add to both Git and the settings file
          if not settings['repository']
            answer = ''
            loop do
              print "\nEnter the URL of the repository you\'d like to store your challenge in: "
              answer = gets.chomp
              break if answer != ''
            end

            # add url to git 
            if not system('git remote add codechallenger '+answer)
              exit 1
            end
            
            # add url to settings
            settings['repository'] = answer

            # write settings back to file
            File.open(settingsPath, 'w') {|f| f.write(JSON.pretty_generate(settings)) }
          end

          # deploy challenge to repository
          if not system('git add -A && git commit && git push codechallenger master')
            exit 1
          end

          puts "\n✔ Challenge deployed to: "+settings['repository']
        }
    },

    'uninit' => {
        :optionParser => OptionParser.new do |opts|
          opts.banner = 'Usage: codechallenger uninit'

          opts.on('--path [PATH]', 'Path to the challenge folder') do |path|
            options[:path] = path
          end
        end,
        :handler => lambda {
          path = options[:path] != nil ? options[:path]+'/' : ''

          check_if_challenger_dir(path)

          loop do
            print "\nThis will permanently remove CodeChallenger from this directory.\nWould you like to continue? [y/N] "

            answer = gets.chomp
            return if answer.downcase != 'y'
            break if answer.downcase == 'y'
          end

          # remove settings file
          File.delete(path+'.codechallenger.json')

          # remove git url
          if File.directory?(path+'.git')
            if not system('git remote remove codechallenger')
              exit 1
            end
          end

          puts "\n✔ CodeChallenger has been removed from this directory."
        }
    },

    'update' => {
        :optionParser => OptionParser.new do |opts|
          opts.banner = 'Usage: codechallenger update'
        end,
        :handler => lambda {
          if not system('git pull origin master')
            exit 1
          end
          puts "\n✔ CodeChallenger-CLI has been updated."
        }
    }

}

# parse global flags
global.order!

# if subcommand, parse flags
command = ARGV.shift
if command != nil && subCommands[command] != nil
  details = subCommands[command]
  details[:optionParser].order!
  details[:handler].call
else
  puts helpText
end

exit 0
