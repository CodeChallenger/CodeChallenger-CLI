#!/usr/bin/env ruby

##
#
#  @project CodeChallenger CLI
#  @author  Matti van de Weem <mvdweem@gmail.com>, Koen Vendrik <k.vendrik@gmail.com>
#  @date    January 2015
#  @url     http://github.com/CodeChallenger
#
##

require 'rubygems'
require 'bundler/setup'

require 'optparse'
require_relative 'inc/challenger.class.rb'


# read a file
def read_file(file_name)
  file = File.open(file_name, 'r')
  data = file.read
  file.close
  return data
end

# hash to store command line options
options = {}

helpText = <<HELP
Usage: codechallenger <command> [options...]

Commands:
   init        generate a new challenge

See 'codechallenger <command> --help' for help on a specific command.
HELP

global = OptionParser.new do |opts|
  opts.on('-h', '--help', 'Show help') do |language|
    puts helpText
    exit 0
  end
end

subCommands = {

    'init' => {
        :optionParser => OptionParser.new do |opts|
          opts.banner = 'Usage: codechallenger init [options...]'

          opts.on('--language [LANGUAGE]', 'Give a challenge for given language') do |language|
            options[:language] = language.downcase
          end

          opts.on('--framework [FRAMEWORK]', 'Give a challenge with the given framework') do |framework|
            options[:framework] = framework.downcase
          end
        end,
        :handler => lambda {
          challenger = Challenger.new(options)

          loop do
            challenger.new_challenge
            puts "\n"+challenger.construct_str
            print "\nUse this challenge? [Y/n] "

            answer = gets.chomp
            break if answer.downcase != 'n'
          end

          p challenger.get_details
        }
    }

}

# parse global flags
global.order!

# if subcommand, parse flags
command = ARGV.shift
if command != nil && subCommands[command] != nil
  details = subCommands[command]
  details[:optionParser].order!
  details[:handler].call
end

exit 0
